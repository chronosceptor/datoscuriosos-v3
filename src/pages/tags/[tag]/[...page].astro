---
import type Props from "../../../interfaces/props";
import type Tag from "../../../interfaces/tag";
import type Article from "../../../interfaces/article";
import Layout from "../../../layouts/Layout.astro";
import Post from "../../../components/Post.astro";
import Paginate from "../../../components/Paginate.astro";
import fetchApi from "../../../lib/strapi";
import config from "../../../../public/site/config.json";

export async function getStaticPaths({ paginate }: { paginate: any }) {
	const tags = await fetchApi<Tag[]>({
		endpoint: `tags?pagination[pageSize]=10000&populate=*&sort=id:desc`,
		wrappedByKey: `data`,
	});

	// Use Promise.all to wait for all async operations to complete
	const articlesPromises = tags.map(async (tag: any) => {
		const articles = await fetchApi<Article[]>({
			endpoint: `articles?filters[tags][id][$eq]=${
				Array.isArray(tag) ? tag[0].id : tag.id
			}&pagination[pageSize]=10000&populate=*&sort=id:desc`,
			wrappedByKey: `data`,
		});

		return { tag, articles };
	});

	const tagArticlesPairs = await Promise.all(articlesPromises);

	const paginatedResults = tagArticlesPairs.flatMap((pair) => {
		return paginate(pair.articles, {
			pageSize: config.pageSize,
			params: {
				tag: pair.tag.attributes.slug,
			},
		});
	});

	return paginatedResults;
}

const { page } = Astro.props;
---

<Layout image="">
	<main>
		<div class="t-container t-max-w-7xl t-py-10">
			{
				page.data.map((article: Article) => (
					<Post
						title={article.attributes.title}
						slug={article.attributes.slug}
						dateCreated={article.attributes.createdAt}
						dateUpdated={article.attributes.updatedAt}
						image={article.attributes.image}
						tags={article.attributes.tags}
					/>
				))
			}

			<Paginate
				current={page.url.current}
				prev={page.url.prev}
				next={page.url.next}
			/>
		</div>
	</main>
</Layout>
